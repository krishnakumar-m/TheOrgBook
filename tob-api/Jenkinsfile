// Wait timeout in minutes
def WAIT_TIMEOUT = 10

// Edit your app's name below
def APP_NAME = 'django'

// Edit your environment TAG names below
def TAG_NAMES = ['dev', 'test', 'prod']

// You shouldn't have to edit these if you're following the conventions
def APP_LABEL = APP_NAME
def IMAGESTREAM_NAME = APP_NAME
def SCHEMA_SPY_IMAGSTREAM_NAME = 'schema-spy'
def PROJECT_NAMESPACE = 'devex-von-'
def CONTEXT_DIRECTORY = 'tob-api'

@NonCPS
boolean triggerBuild(String contextDirectory) {
  // Determine if code has changed within the source context directory.
  def changeLogSets = currentBuild.changeSets
  def filesChangeCnt = 0
  for (int i = 0; i < changeLogSets.size(); i++) {
    def entries = changeLogSets[i].items
    for (int j = 0; j < entries.length; j++) {
      def entry = entries[j]
      //echo "${entry.commitId} by ${entry.author} on ${new Date(entry.timestamp)}: ${entry.msg}"
      def files = new ArrayList(entry.affectedFiles)
      for (int k = 0; k < files.size(); k++) {
        def file = files[k]
        def filePath = file.path
        //echo ">> ${file.path}"
        if (filePath.contains(contextDirectory)) {
          filesChangeCnt = 1
          k = files.size()
          j = entries.length
        }
      }
    }
  }

  if ( filesChangeCnt < 1 ) {
    echo('The changes do not require a build.')
    return false
  }
  else {
    echo('The changes require a build.')
    return true
  }
}

// Get an image's hash tag
String getImageTagHash(String imageName, String tag = "") {

  if(!tag?.trim()) {
    tag = "latest"
  }

  def istag = openshift.raw("get istag ${imageName}:${tag} -o template --template='{{.image.dockerImageReference}}'")
  return istag.out.tokenize('@')[1].trim()
}

node {
  if( triggerBuild(CONTEXT_DIRECTORY) ) {

    stage("Build ${APP_LABEL}") {
      script {
        openshift.withCluster() {
          openshift.withProject() {

            // Find all of the build configurations associated to the application using labels ...
            def buildconfigs = openshift.selector("bc", [ app : "${APP_LABEL}" ])
            echo "Found ${buildconfigs.count()} buildconfigs for app label (app=${APP_LABEL}): ${buildconfigs.names()}"

            // Kick off all the builds in parallel ...
            def builds = buildconfigs.startBuild()
            echo "Started ${builds.count()} builds: ${builds.names()}"

            timeout(WAIT_TIMEOUT) {
              // Wait for all the builds to complete ...
              // This section will exit after the last build completes.
              echo "Waiting for builds to complete ..."
              builds.withEach {
                // untilEach and watch - do not support watching multiple named resources,
                // so we have to feed it one at a time.
                it.untilEach(1) {
                    echo "${it.object().status.phase} - ${it.name()}"
                    return (it.object().status.phase == "Complete")
                }
              }
            }

            echo "Builds complete ..."
          }
        }
      }
    }

    stage("Deploy ${TAG_NAMES[0]}") {
      script {
        openshift.withCluster() {
          openshift.withProject() {

            echo "Tagging ${IMAGESTREAM_NAME} for deployment to ${TAG_NAMES[0]} ..."

            // Don't tag with BUILD_ID so the pruner can do it's job; it won't delete tagged images.
            // Tag the images for deployment based on the image's hash
            def IMAGE_HASH = getImageTagHash("${IMAGESTREAM_NAME}")
            echo "IMAGE_HASH: ${IMAGE_HASH}"
            openshift.tag("${IMAGESTREAM_NAME}@${IMAGE_HASH}", "${IMAGESTREAM_NAME}:${TAG_NAMES[0]}")

            echo "Tagging ${SCHEMA_SPY_IMAGSTREAM_NAME} for deployment to ${TAG_NAMES[0]} ..."
            openshift.tag("${SCHEMA_SPY_IMAGSTREAM_NAME}:latest", "${SCHEMA_SPY_IMAGSTREAM_NAME}:${TAG_NAMES[0]}")
          }
        }
      }
    }

    stage("Update ${SCHEMA_SPY_IMAGSTREAM_NAME} instance in ${TAG_NAMES[0]}") {
      script {
        openshift.withCluster() {
          openshift.withProject("${PROJECT_NAMESPACE}${TAG_NAMES[0]}") {

              // For this to work the Jenkins service mush have edit permissions within the deployment project.
              // Example OC cmd to accomplish this task (it's better if you have projet init scripts that do this);
              // oc policy add-role-to-user edit system:serviceaccount:devex-von-tools:jenkins -n devex-von-dev
              def dc = openshift.selector('dc', "${SCHEMA_SPY_IMAGSTREAM_NAME}")
              dc.scale("--replicas=0")
              dc.scale("--replicas=1")
          }
        }
      }
    }
  }
  else {
    stage('No Changes') {
      echo "No changes ..."
      currentBuild.result = 'SUCCESS'
    }
  }
}